#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#include <iomanip>

using namespace std;

struct pt {
	double x, y;
	pt(){
		x=0;
		y=0;
	}
};

bool cmp (pt a, pt b) {
	return a.x < b.x || a.x == b.x && a.y < b.y;
}

bool lcmp (pt a, pt b, pt c) {
	return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y) < 0;
}

bool rcmp (pt a, pt b, pt c) {
	return a.x*(b.y-c.y)+b.x*(c.y-a.y)+c.x*(a.y-b.y) > 0;
}

void convex_hull (vector<pt> &a) {
	sort (a.begin(), a.end(), &cmp);
	pt p1 = a[0],  p2 = a.back();
	vector<pt> up, down;
	up.push_back (p1);
	down.push_back (p1);
	
	for (int i=1; i < a.size(); ++i) {
		if (i==a.size()-1 || lcmp(p1, a[i], p2)) {
			while (up.size()>=2 && !lcmp (up[up.size()-2], up[up.size()-1], a[i]))
				up.pop_back();
			up.push_back (a[i]);
		}
		if (i==a.size()-1 || rcmp(p1, a[i], p2)) {
			while (down.size()>=2 && !rcmp (down[down.size()-2], down[down.size()-1], a[i]))
				down.pop_back();
			down.push_back (a[i]);
		}
	}
	a.clear();
	for (int i=0; i<up.size(); ++i)
		a.push_back (up[i]);
	for (int i=down.size()-2; i>0; --i)
		a.push_back (down[i]);
}

int main(){
	int n;
	cin >> n;
	vector <pt> v(n);
	for(int i = 0; i < n; ++i){
		cin >> v[i].x >> v[i].y;
	}
	convex_hull(v);
	
	long double ans=0;
	v.push_back(v[0]);
	for(int i = 0; i < v.size()-1; ++i){
		ans+=sqrt(1.0*(v[i+1].x-v[i].x)*(v[i+1].x-v[i].x)+(v[i+1].y-v[i].y)*(v[i+1].y-v[i].y));
	}
	cout << fixed<<setprecision(1)<<ans;
	return 0;
}
